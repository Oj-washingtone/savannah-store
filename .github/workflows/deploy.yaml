name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests with coverage
        run: go test ./... -coverprofile=coverage.out

      - name: Display coverage
        run: go tool cover -func=coverage.out
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE_NAME=$(echo "ghcr.io/${{ github.repository }}/api-service" | tr '[:upper:]' '[:lower:]')
          docker build -t $IMAGE_NAME:latest .

      - name: Push Docker image
        run: |
          IMAGE_NAME=$(echo "ghcr.io/${{ github.repository }}/api-service" | tr '[:upper:]' '[:lower:]')
          docker push $IMAGE_NAME:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Contabo VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.CONTABO_HOST }}
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}

          script: |
            cd /opt

            if [ -d "savannah-store/.git" ]; then
                cd savannah-store
                git reset --hard
                git pull origin main
            else
                git clone git@github.com:Oj-washingtone/savannah-store.git savannah-store
                cd savannah-store
            fi

            #Create ENV
            echo "DB_USER=${{ secrets.DB_USER }}" > .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env

            echo "AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}" >> .env
            echo "AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}" >> .env
            echo "AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }}" >> .env
            echo "AUTH0_CALLBACK_URL=${{ secrets.AUTH0_CALLBACK_URL }}" >> .env

            echo "RESEND_KEY=${{ secrets.RESEND_KEY }}" >> .env
            echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env

            echo "AFRICASTALKING_API_KEY=${{ secrets.AFRICASTALKING_API_KEY }}" >> .env
            echo "AFRICASTALKING_URL=${{ secrets.AFRICASTALKING_URL }}" >> .env
            echo "AFRICASTALKING_USERNAME=${{ secrets.AFRICASTALKING_USERNAME }}" >> .env

            # Pull the latest image and deploy with Docker Compose
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose -f docker-compose.prod.yml --env-file .env pull
            docker compose -f docker-compose.prod.yml --env-file .env up -d --force-recreate
